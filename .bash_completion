#!/usr/bin/env bash
# Bash completion for symlink utility v1.3.7+
# Provides completion for options, files, and directories

_symlink() {
  local cur prev words cword
  _init_completion || return

  # Handle completion based on previous option
  case "$prev" in
    -t|--target-dir)
      # Complete directories for target-dir option
      _filedir -d
      return 0
      ;;
  esac

  # Handle completion based on current word
  if [[ "$cur" == -* ]]; then
    # Complete options
    local opts="
      -t --target-dir
      -S --scan-symlink
      -d --delete-broken-symlinks
      -P --no-prompt
      -l --list
      -n --dry-run
      -v --verbose
      -q --quiet
      -V --version
      -h --help
      -D --debug
    "
    COMPREPLY=($(compgen -W "$opts" -- "$cur"))
    return 0
  fi

  # Determine completion context based on options already provided
  local i scan_mode=0 list_mode=0
  for ((i=1; i < cword; i++)); do
    case "${words[i]}" in
      -S|--scan-symlink)
        scan_mode=1
        ;;
      -l|--list)
        list_mode=1
        ;;
      -[tSdPlnvqVhD]*)
        # Handle combined short options
        if [[ "${words[i]}" == *S* ]]; then
          scan_mode=1
        elif [[ "${words[i]}" == *l* ]]; then
          list_mode=1
        fi
        ;;
    esac
  done

  # Complete based on mode
  if [[ $scan_mode -eq 1 || $list_mode -eq 1 ]]; then
    # In scan or list mode, complete directories only
    _filedir -d
  else
    # In direct linking mode, complete files and directories
    # Prioritize executable files
    local files
    compopt -o filenames

    # Get all files and filter for executables
    files=($(compgen -f -- "$cur"))

    # Add directories
    local dirs
    dirs=($(compgen -d -- "$cur"))

    # Combine and return
    COMPREPLY=("${files[@]}" "${dirs[@]}")
  fi

  return 0
}

# Register completion function
complete -F _symlink symlink